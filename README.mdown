PyAl: A Python Module for Alfred v2 Workflows
=============================================
PyAl is a Python module designed to automate a number of common and repetitive tasks in creating workflows for Alfred v2. In addition to handling the creation of feedback, the creation of cache files or folders, and similar tasks, PyAl bundles a number of handy modules that can be seamlessly and independently integrated into your workflow through PyAl. Though this project's pace of change is currently a little breakneck, demanding some attention from developers interested in integrating it into their own workflows, it is intended that the completed version will be virtually invisible, able to speed the development of workflows, improve their performance, and scale tall buildings in a single bound.

**Because this project is changing so quickly, please do not copy versions of PyAl from other developers' workflows.** You will only create more work for yourself---and less flow. The latest version and latest dev branch of the module are available at <http://github.com/phyllisstein/PyAl>.


Features
--------
* A feedback class to which items can be added with a single line of code.
* A simple, cached HTTP request class.
* Functions to return your bundle ID, the path to your cache folder, and the path to your storage folder.
* Spotlight search.
* A settings class to store and retrieve variables across sessions.


Usage
-----
To start using PyAl, simply paste the PyAl folder into your workflow's folder and add this line to the top of your code:

    import PyAl

### Functions
* `PyAl.bundle()`
    
    Reads your extension's bundle ID from its info.plist file and returns it.

* `PyAl.local([join=None])`

    Returns an absolute path to the current file's directory---usually your extension's absolute path.

* `PyAl.volatile([join=None])`

    Returns the path to the volatile (cache) folder for your extension, creating the directory if it does
    not already exist. If an argument is passed, returns the path to whatever is specified in the argument underneath
    the volatile folder; **however, it does not create this file or folder**. Once you have the joined path, you
    must do something with it.

* `PyAl.nonvolatile([join=None])`

    Returns the path to the nonvolatile (storage) folder for your extension, creating the directory if it does not
    already exist. If an argument is passed, returns the path to whatever is specified in the argument underneath the
    nonvolatile folder; **however, it does not create this file or folder**. Once you have the joined path, you must
    do something with it.

* `PyAl.find(query)`

    Returns a list containing the results of a Spotlight search for `query`.


### Classes
#### Feedback
The `PyAl.Feedback` class simplifies and indeed largely automates the creation of feedback XML for Alfred. Instantiate it with `myFeedback = PyAl.Feedback()` and then use the following functions to add items:

* `Feedback.addValidItem(arg, itemDict[, uid=""])`

    Adds an actionable item to the feedback list, with argument `arg` and optional UID `uid`. The variable `itemDict`
    defines the keys and values that should be included in the item's XML. It will update the `defaultItem` dictionary,
    which is defined as `{"title": "Item", "subtitle": bundleID, "icon": "icon.png"}`. In practice, the benefit of this
    is that it is not necessary to specify the default icon in every result to create well-formatted feedback. You could
    leave the title as "Item" and the subtitle as `bundleID` if you wanted to, but it's not recommended.

* `Feedback.addInvalidItem(autocomplete, itemDict[, uid=""])`

    Adds a non-actionable item to the feedback list which will autocomplete to `autocomplete`. `uid` is again optional.
    This function also updates the `defaultItem` dictionary described above to generate its XML.

* `Feedback.addItem(argsDict, itemDict)`

    A legacy version of the above functions kept where it is in case the feedback XML format changes. This function doesn't
    bother setting any defaults or requiring any information; it simply sets the arguments of `<item>` to the keys and
    values of `argsDict` and the children of `<item>` to the keys and values of `itemDict`. Everything must be specified by
    hand in order to generate XML that Alfred understands.

### Request
The `PyAl.Request` class aims at similar simplification and automation, but this time of HTTP requests (via the `requests` module). It sets up an HTTP requests cache (with the `requests_cache` module) and passes the returned data to BeautifulSoup for your searching and parsing convenience (see [the BeautifulSoup docs](http://www.crummy.com/software/BeautifulSoup/bs4/doc/) for more information).

* `PyAl.Request(url[, payload=None[, post=False]])`

    Initializes the object by getting the data at `url`. `payload` may be set to a dictionary of keys and values to be
    passed as GET arguments to the URL, or, if `post` is set to `True`, as POST data. You can interact with the request by
    using the instance variable `myInstance.request`, and do anything with it
    [that `requests` allows](http://docs.pythonrequests.org/en/latest/user/quickstart/).

* `Request.souper()`

    Checks to see that the request was successful; if not, it raises an exception; if so, it returns a BeautifulSoup object
    for the request's text.


### Settings
`PyAl.Settings` smoothly and transparently loads and saves information to a stable settings file that will persist across instances of the script. It takes no arguments to instantiate, and defines three instance methods:

* `Settings.set(**kwargs)`

    Taking `kwargs`, which must be a dictionary of key--value pairs, saves the key and value in memory and to a JSON-encoded
    settings file in the extension's nonvolatile folder.

* `Settings.get(k[, default=None])`

    Returns the currently-loaded value for the setting with key `k`. Returns `default` if no value is found for `k`.

* `Settings.delete(k)`

    Removes the setting with key `k` from memory and from the settings JSON file.

### Keychain
This class provides a simple interface to the OS X keychain. It is currently able to store, retrieve, and modify password data. To use it, simply instantiate and use the methods below to manipulate the data.

* `PyAl.Keychain([service=None])`

    Instantiates a keychain object to access data for the service `service`---or, if nothing is passed for `service`, your
    extension's bundle ID.

* `Keychain.storePassword(account, password)`

    Stores a `password` for username `account` under the predefined service in the main keychain.

* `Keychain.retrievePassword(account)`

    Returns the password for the predefined service's `account`. Returns `None` if no password is found.

* `Keychain.modifyPassword(account, newPassword)`

    Changes the password for the predefined service's `account` to `newPassword`. **Warning:** This is presently the least
    well-tested method of the bunch. If garbage characters are appended to your new password, as occasionally happened in
    testing, please [get in touch](https://github.com/phyllisstein/PyAl#help-and-support). More data would be a great boon.


Help and Support
----------------
The [Alfred v2 forums](http://www.alfredforum.com) are a good place to look for answers, but you can also reach this package's maintenance man, [Daniel](http://daniel.sh), at d atsign daniel dot sh or on Twitter at [@phyllisstein](http://twitter.com/phyllisstein/).